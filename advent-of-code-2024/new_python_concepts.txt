# Comprehensive list of "new concepts" introduced in blog posts:

* 'defaultdict`
* `%` modulo operator
* `//` divfloor operator
* `@cache` decorator
* `^` xor operator
* `abs()`
* `all()`
* `any()`
* `append()`
* `assert`
* `complex()`
* `Counter`
* `dict.get(key, default)`
* `divmod()`
* `filter()`
* `functools.cmp_to_key()`
* `Graph().add_edge()`
* `import <lib> as <label>`
* `import`
* `int()`
* `is not` operator
* `itertools.count`
* `join()`
* `lambda`
* `list()`
* `Match.group()`
* `match` structural matching
* `math.gcd()`
* `networkx` library
* `next()`
* `not in` operator
* `np.array()`
* `np.linalg.solve()`
* `nx.all_pairs_all_shortest_paths()`
* `nx.all_shortest_paths()`
* `nx.DiGraph()`
* `nx.Graph()`
* `nx.shortest_path_length()`
* `pop()`
* `range()`
* `re.finditer()`
* `re`
* `removeprefix()`
* `reversed()`
* `round()`
* `set.intersection()`
* `sorted()`
* `startswith()`
* `str.find()`
* `str.split()`
* `sum()`
* `yield from`
* `yield`
* `zip()`
* Assignment expressions e.g. `(x := int(c.real))`
* Chained boolean expressions `x < y < z`
* Complex numbers
* Conditional in list comprehension `[ ... if pred() ]`
* Default parameters `def solve(ignore_commands=False)`
* Extended unpacking with `*` e.g. `for s, *lsts in disk:`
* Generator expressions `(pred(x) for x in ...)`
* itertools.combinations
* List comprehensions
* Nested list comprehensions e.g. `[ [ x for xs in cp for x in xs ] for cp in cross_product(*buttons) ]`
* Numpy
* Parallel assignment
* Sequence slicing `[:]`
* Set comprehensions
* sets
* Slicing with a step value e.g. `input[1::2]`
* Ternary operator `x if expr else y`
* Unpacking with *
